#!/usr/bin/env python3
"""
MCP Services Framework - Main Entry Point
"""
import os
import logging
from config.settings import Settings
from app import create_app
import uvicorn


def configure_logging(level: str = "INFO"):
    """C·∫•u h√¨nh logging to√†n h·ªá th·ªëng"""
    # ƒê·∫£m b·∫£o level lu√¥n l√† ch·ªØ hoa
    level = level.upper() if isinstance(level, str) else level
    logging.basicConfig(
        level=level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.StreamHandler(),
            # logging.FileHandler("mcp_framework.log")  # B·∫≠t n·∫øu c·∫ßn ghi log ra file
        ],
    )
    # Gi·∫£m m·ª©c log cho m·ªôt s·ªë th∆∞ vi·ªán ·ªìn √†o
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("asyncio").setLevel(logging.WARNING)


def print_startup_banner(settings: Settings):
    """Hi·ªÉn th·ªã th√¥ng tin kh·ªüi ƒë·ªông"""
    print("\n" + "=" * 60)
    print(f"üöÄ Starting MCP Services Framework v{settings.VERSION}")
    print("=" * 60)
    print(f"üîß Environment: {settings.ENV}")
    print(f"üåê Host: {settings.HOST}:{settings.PORT}")
    print(f"üîí Debug Mode: {'ON' if settings.DEBUG else 'OFF'}")
    print(f"üì° API Endpoint: POST /mcp")
    print(f"üìÑ Documentation: GET /docs")
    print("-" * 60)


def main():
    # T·∫£i c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    settings = Settings()  # type: ignore

    # C·∫•u h√¨nh logging
    configure_logging(level=settings.LOG_LEVEL)
    logger = logging.getLogger("main")

    # T·∫°o ·ª©ng d·ª•ng FastAPI
    app = create_app(settings)

    # Hi·ªÉn th·ªã th√¥ng tin kh·ªüi ƒë·ªông
    print_startup_banner(settings)

    # Kh·ªüi ch·∫°y server
    uvicorn.run(
        app,
        host=settings.HOST,
        port=settings.PORT,
        log_level=settings.LOG_LEVEL.lower(),
        reload=settings.RELOAD,
        server_header=False,  # TƒÉng c∆∞·ªùng b·∫£o m·∫≠t
        proxy_headers=settings.PROXY_HEADERS,
        timeout_keep_alive=settings.KEEP_ALIVE_TIMEOUT,
    )


if __name__ == "__main__":
    main()
